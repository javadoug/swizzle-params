{"version":3,"sources":["../../src/bin/swizzle-cli.js"],"names":["rc","loadRcConfig","rcFiles","getRcFilePathsIfExists","conf","loadSwizzleConfig","file","swizzle","version","command","alias","description","option","action","options","console","log","generated","password","mask","name","desc","defaultValue","param","noSave","addParam","samples","removeParam","state","params","find","p","files","addFiles","removeFiles","isDefault","swizzleStackInit","swizzleStackConfig","swizzleStack","verbose","clean","parse","process","argv","getValue","value","toUpperCase","paramName","filter","map","join"],"mappings":"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","file":"swizzle-cli.js","sourcesContent":["\nimport program from 'commander'\nimport {swizzleFileSystem} from '../swizzle-file-system'\nimport {SwizzleConfig} from '../swizzle-config'\nimport {Swizzle} from '../swizzle'\nimport snakeCase from 'lodash.snakecase'\nimport packageJson from '../../package.json'\n\n// only uses ~/.swizzlerc or ./.swizzlerc\nconst rc = swizzleFileSystem.loadRcConfig({rcFiles: swizzleFileSystem.getRcFilePathsIfExists()})\nconst conf = new SwizzleConfig(swizzleFileSystem.loadSwizzleConfig({file: './swizzle.json', rc}))\nconst swizzle = new Swizzle(conf, swizzleFileSystem)\n\nprogram\n\t.version(packageJson.version)\n\nprogram\n\t.command('add-param')\n\t.alias('ap')\n\t.description('add a parameter to swizzle.json')\n\t.option('-g, --generated', 'generated parameter so do not prompt user')\n\t.option('-n, --name <name>', 'name of parameter to add')\n\t.option('-d, --desc <desc>', 'description of parameter')\n\t.option('-v, --default-value <defaultValue>', 'default value of parameter')\n\t.option('-p, --password', 'do not print parameter value to terminal output')\n\t.option('-m, --mask', 'do not save parameter value in files, uses the mask \"no-save\"')\n\t.action((options) => {\n\n\t\tconsole.log(`add-param %s%s%s--name \"%s\" --desc \"%s\" --default-value \"%s\"`,\n\t\t\toptions.generated ? '-g ' : '',\n\t\t\toptions.password ? '--password ' : '',\n\t\t\toptions.mask ? '--mask ' : '',\n\t\t\toptions.name,\n\t\t\toptions.desc ? options.desc : '',\n\t\t\toptions.defaultValue ? options.defaultValue : '')\n\n\t\tconst param = {\n\t\t\tname: options.name,\n\t\t\tdesc: options.desc,\n\t\t\tdefaultValue: options.defaultValue\n\t\t}\n\n\t\tif (options.mask) {\n\t\t\tparam.noSave = true\n\t\t} else {\n\t\t\tparam.noSave = false\n\t\t}\n\n\t\tif (options.password) {\n\t\t\tparam.password = true\n\t\t} else {\n\t\t\tparam.password = false\n\t\t}\n\n\t\tif (options.generated) {\n\t\t\tparam.generated = true\n\t\t} else {\n\t\t\tparam.generated = false\n\t\t}\n\n\t\tswizzle.addParam(param)\n\n\t\tconsole.log(samples())\n\n\t})\n\n\nprogram\n\t.command('remove-param')\n\t.alias('rp')\n\t.description('remove a parameter from swizzle.json')\n\t.option('-n, --name <name>', 'name of parameter to remove')\n\t.action((options) => {\n\n\t\tconsole.log(`remove-param --name '%s'`, options.name)\n\n\t\t// todo notify which code files use this param\n\n\t\tconst param = {\n\t\t\tname: options.name\n\t\t}\n\n\t\tconst removeParam = conf.state.params.find((p) => p.name === param.name)\n\n\t\tif (!removeParam) {\n\t\t\tconsole.log('param name is not found in swizzle.json', param.name)\n\t\t\treturn\n\t\t}\n\n\t\tconsole.log('be sure to remove this param from any code files to minimize errors.')\n\t\tconsole.log(samples(param.name))\n\n\t\tswizzle.removeParam(param)\n\n\t})\n\nprogram\n\t.command('add-files [files...]')\n\t.alias('af')\n\t.description('add code files to swizzle.json')\n\t.action((files) => {\n\n\t\tconsole.log('add-files %s', files)\n\n\t\tswizzle.addFiles({files})\n\n\t\tconsole.log('add the parameters needed in each code file:')\n\t\tconsole.log(samples())\n\t\tconsole.log('then run `swizzle stack <stack-name>` to enter parameters')\n\t\tconsole.log('and swizzle the configuration values in your code files.')\n\n\t})\n\nprogram\n\t.command('remove-files [files...]')\n\t.alias('rf')\n\t.description('remove code files from swizzle.json')\n\t.action((files) => {\n\n\t\tconsole.log('files %s', files)\n\n\t\tif (typeof files === 'string') {\n\t\t\tfiles = [files]\n\t\t}\n\n\t\tswizzle.removeFiles({files})\n\n\t})\n\nprogram\n\t.command('init', {isDefault: true})\n\t.alias('i')\n\t.description('prompt for stack name, prompt for missing parameters, swizzle code files')\n\t.option('-e, --edit-first', 'review and edit stack parameter values, swizzle code files')\n\t.option('-s, --use-rc', 'save stack param values in the .swizzlerc file')\n\t.option('-f, --file <file>', 'save stack param values in the given file')\n\t.action((options) => {\n\t\tswizzle.swizzleStackInit(options)\n\t})\n\nprogram\n\t.command('config', {isDefault: true})\n\t.alias('c')\n\t.description('continue with current stack name, prompt for missing parameters, swizzle code files')\n\t.option('-e, --edit-first', 'review and edit stack parameter values, swizzle code files')\n\t.option('-s, --use-rc', 'save stack param values in the .swizzlerc file')\n\t.option('-f, --file <file>', 'save stack param values in the given file')\n\t.action((options) => {\n\t\tswizzle.swizzleStackConfig(options)\n\t})\n\nprogram\n\t.command('stack <name>')\n\t.alias('s')\n\t.description('use given stack name, prompt for missing parameter values, swizzle code files')\n\t.option('-e, --edit-first', 'review and edit stack parameter values, swizzle code files')\n\t.option('-s, --use-rc', 'save stack param values in the .swizzlerc file')\n\t.option('-f, --file <file>', 'save stack param values in the given file')\n\t.action((name, options) => {\n\t\tswizzle.swizzleStack(name, options)\n\t})\n\nprogram\n\t.command('clean')\n\t.alias('c')\n\t.description('un-swizzle parameter values back to defaultValue and remove all stacks')\n\t.option('-v, --verbose', 'additional logging')\n\t.action((options) => {\n\t\tconst params = {\n\t\t\tverbose: options.verbose\n\t\t}\n\t\tswizzle.clean(params)\n\t})\n\nprogram.parse(process.argv)\n\nfunction getValue(param) {\n\tif (param.defaultValue) {\n\t\treturn param.defaultValue\n\t}\n\tconst value = param.description || param.name\n\treturn snakeCase('Your_' + value).toUpperCase()\n}\n\nfunction samples(paramName) {\n\tconst params = conf.state.params.filter((p) => paramName ? p.name === paramName : true).map((param) => {\n\t\tconst value = getValue(param)\n\t\treturn `\\n\\t\\t\"${param.name}\": \"${value}\"`\n\t}).join(',')\n\treturn `\\t{${params}\\n\\t}`\n}\n"]}