{"version":3,"sources":["../src/swizzle-file-system.js"],"names":["swizzleSourceFiles","saveSwizzleConfig","loadSwizzleConfig","loadStacksFromJsonFile","loadRcConfig","readJsonFile","writeJsonFile","getRcFilePathsIfExists","getSwizzleJsonFilePath","isFile","file","pathExistsSync","params","files","replaceList","Object","keys","reduce","list","name","value","JSON","stringify","find","RegExp","withValue","push","forEach","key","Math","random","toString","slice","mask","maskRegExp","text","readFileSync","masked","replace","updated","modified","param","unmasked","writeFileSync","console","log","conf","swizzleJson","rc","assign","stacks","saveParams","result","item","noSave","stackName","json","stack","stackParams","entry","length","rcFile","filePath","map","stacksFile","update","rcFiles","test","resolve","parse","outputJsonSync","spaces","paths","localRc","process","cwd","homeRc","swizzleFileSystem"],"mappings":"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","file":"swizzle-file-system.js","sourcesContent":["import fs from 'fs'\nimport fsx from 'fs-extra'\nimport home from 'os-homedir'\nimport path from 'path'\nimport {defaultConf} from './swizzle-config'\nimport defaultsDeep from 'lodash.defaultsdeep'\nimport omit from 'lodash.omit'\nimport pick from 'lodash.pick'\n\nexport const isFile = (file) => fsx.pathExistsSync(file)\n\nexport function swizzleSourceFiles({params, files}) {\n\tconst replaceList = Object.keys(params).reduce((list, name) => {\n\t\tconst value = JSON.stringify(params[name])\n\t\t// .*? means don't be greedy and stop at the first \"\n\t\tconst find = new RegExp(`\"${name}\":\\\\s*\".*?\"`, 'g')\n\t\tconst withValue = `\"${name}\": ${value}`\n\t\tlist.push({find, withValue})\n\t\treturn list\n\t}, [])\n\tfiles.forEach((file) => {\n\t\t// replace \"<name>\": \".*?\" with \"<name>\": \"<value>\"\n\t\t// support values that contain escaped double quotes by masking them\n\t\t// to minimize the risk of using a string in the file as our mask\n\t\t// use an unique mask to obscure the escaped double quote (\\\\\")\n\t\tconst key = Math.random().toString(28).slice(2, 10)\n\t\tconst mask = `«MaskingEscapedDoubleQuotes_${key}»`\n\t\tconst maskRegExp = new RegExp(mask, 'g')\n\t\tconst text = fs.readFileSync(file, 'utf8')\n\t\tconst masked = text.replace(/\\\\\"/g, mask)\n\t\tconst updated = replaceList.reduce((modified, param) => {\n\t\t\treturn modified.replace(param.find, param.withValue)\n\t\t}, masked)\n\t\tconst unmasked = updated.replace(maskRegExp, '\\\\\"')\n\t\tfs.writeFileSync(file, unmasked, 'utf8')\n\t\tconsole.log('swizzled', file)\n\t})\n}\n\nexport function saveSwizzleConfig({conf, file}) {\n\tconst swizzleJson = pick(conf, ['files', 'params', 'stackName'])\n\tconst rc = Object.assign({}, conf.rc, {stacks: {}})\n\tswizzleJson.stacks = {}\n\tconst saveParams = conf.params.reduce((result, item) => {\n\t\tif (item.noSave) {\n\t\t\treturn result\n\t\t}\n\t\tresult.push(item.param)\n\t\treturn result\n\t}, [])\n\tif (conf.stacks) {\n\t\tObject.keys(conf.stacks).forEach((stackName) => {\n\t\t\tlet json = {stacks: {}}\n\t\t\tconst stack = conf.stacks[stackName]\n\t\t\tconst stackParams = pick(stack.params, saveParams)\n\t\t\tconst entry = {[stackName]: stackParams}\n\t\t\t// if this is the project ./swizzle.json file then add to config\n\t\t\tif (stack.file && stack.file !== file) {\n\t\t\t\tif (isFile(stack.file)) {\n\t\t\t\t\tjson = readJsonFile({file: stack.file})\n\t\t\t\t}\n\t\t\t\tif (!json.stacks) {\n\t\t\t\t\tjson.stacks = {}\n\t\t\t\t}\n\t\t\t\tObject.assign(json.stacks, entry)\n\t\t\t\twriteJsonFile({file: stack.file, json})\n\t\t\t\trc.stacks[stackName] = {file: stack.file}\n\t\t\t} else {\n\t\t\t\tdefaultsDeep(swizzleJson.stacks, entry)\n\t\t\t}\n\t\t})\n\t}\n\tif (Object.keys(rc.stacks).length === 0) {\n\t\tdelete rc.stacks\n\t} else {\n\t\t// todo handle merged rc files from ~ and . locations\n\t\tconst rcFile = rc.filePath || '.swizzlerc'\n\t\twriteJsonFile({file: rcFile, json: rc})\n\t}\n\tif (!file) {\n\t\tfile = './swizzle.json'\n\t}\n\tif (Object.keys(swizzleJson.stacks).length === 0) {\n\t\tdelete swizzleJson.stacks\n\t}\n\twriteJsonFile({file, json: swizzleJson})\n}\n\nexport function loadSwizzleConfig({file, rc}) {\n\tif (isFile(file)) {\n\t\tconst swizzleJson = defaultsDeep(defaultConf(), readJsonFile({file}))\n\t\tswizzleJson.stacks = loadStacksFromJsonFile({file})\n\t\tswizzleJson.stacks = defaultsDeep({}, rc.stacks, swizzleJson.stacks)\n\t\tswizzleJson.rc = omit(rc, 'stacks');\n\t\tswizzleJson.filePath = file\n\t\treturn swizzleJson\n\t}\n\tconst swizzleJson = defaultConf()\n\tswizzleJson.stacks = defaultsDeep({}, rc.stacks)\n\treturn swizzleJson\n}\n\nexport function loadStacksFromJsonFile({file}) {\n\tconst json = readJsonFile({file})\n\tconst stacks = json.stacks ? json.stacks : {}\n\treturn Object.keys(stacks).reduce((map, stackName) => {\n\t\tconst stack = stacks[stackName]\n\t\tif (stack.file) {\n\t\t\tconst stacksFile = readJsonFile({file: stack.file})\n\t\t\tconst update = Object.keys(stacksFile.stacks).reduce((map, stackName) => {\n\t\t\t\tconst params = stacksFile.stacks[stackName]\n\t\t\t\tconst entry = {[stackName]: {params, file: stack.file}}\n\t\t\t\treturn defaultsDeep(entry, map)\n\t\t\t}, {})\n\t\t\treturn defaultsDeep(map, update)\n\t\t} else {\n\t\t\tconst params = stack.params ? stack.params : stack\n\t\t\tconst entry = {[stackName]: {params, file}}\n\t\t\treturn defaultsDeep(entry, map)\n\t\t}\n\t}, {})\n}\n\nexport function loadRcConfig({rcFiles}) {\n\tconst rc = {stacks: {}}\n\tif (!(rcFiles || rcFiles.length === 0)) {\n\t\treturn rc\n\t}\n\trcFiles.reduce((rc, file) => {\n\t\tif (isFile(file)) {\n\t\t\tif (/^~\\//.test(file)) {\n\t\t\t\tfile = path.resolve(home(), file.replace(/^~\\//, ''))\n\t\t\t}\n\t\t\trc.file = file\n\t\t\t// todo to support merging of rc files ...\n\t\t\t// need to keep the stacks with their rc\n\t\t\t// for now only use / allow one rc file\n\t\t\t// if multiple are give the last one wins\n\t\t\treturn defaultsDeep(rc, loadStacksFromJsonFile({file}))\n\t\t}\n\t\treturn rc\n\t}, rc.stacks)\n\treturn rc\n}\n\nexport function readJsonFile({file}) {\n\treturn JSON.parse(fs.readFileSync(file, 'utf8'))\n}\n\nexport function writeJsonFile({file, json}) {\n\treturn fsx.outputJsonSync(file, json, {spaces: '\\t'})\n}\n\nexport function getRcFilePathsIfExists() {\n\tconst paths = []\n\tconst localRc = path.resolve(process.cwd(), '.swizzlerc')\n\tif (isFile(localRc)) {\n\t\tpaths.push(localRc)\n\t}\n\tconst homeRc = path.resolve(home(), '.swizzlerc');\n\tif (isFile(homeRc)) {\n\t\tpaths.push(homeRc)\n\t}\n\treturn paths\n}\n\nexport function getSwizzleJsonFilePath() {\n\treturn path.resolve(process.cwd(), 'swizzle.json')\n}\n\nexport const swizzleFileSystem = {\n\tisFile,\n\tswizzleSourceFiles,\n\tsaveSwizzleConfig,\n\tloadSwizzleConfig,\n\tloadRcConfig,\n\treadJsonFile,\n\twriteJsonFile,\n\tgetRcFilePathsIfExists,\n\tgetSwizzleJsonFilePath\n}\n"]}