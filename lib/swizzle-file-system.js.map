{"version":3,"sources":["../src/swizzle-file-system.js"],"names":["swizzleFileName","rcFileName","SwizzleFileSystem","params","files","replaceList","Object","keys","reduce","list","name","value","JSON","stringify","find","RegExp","withValue","push","forEach","file","key","Math","random","toString","slice","mask","maskRegExp","text","readFile","masked","replace","updated","modified","param","unmasked","writeFile","console","log","conf","swizzleJson","rc","assign","stacks","stackName","json","stack","stackParams","result","noSave","entry","resolvedFile","resolve","cwd","resolvedStackFile","isFile","readJsonFile","writeJsonFile","length","rcFile","filePath","getSwizzleJsonFilePath","loadStacksFromJsonFile","map","stacksFile","update","rcFiles","gotFileNames","test","resolvePath","home","paths","localRc","homeRc","parse","outputJsonSync","spaces","readFileSync","writeFileSync","apply","pathExistsSync","process","swizzleFileSystem"],"mappings":"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","file":"swizzle-file-system.js","sourcesContent":["import fs from 'fs'\nimport fsx from 'fs-extra'\nimport home from 'os-homedir'\nimport path from 'path'\nimport {defaultConf} from './swizzle-config'\nimport defaultsDeep from 'lodash.defaultsdeep'\nimport omit from 'lodash.omit'\nimport pick from 'lodash.pick'\n\nexport const swizzleFileName = './swizzle.json'\n\nexport const rcFileName = '.swizzlerc'\n\nexport class SwizzleFileSystem {\n\n\tswizzleSourceFiles({params, files}) {\n\t\tconst replaceList = Object.keys(params).reduce((list, name) => {\n\t\t\tconst value = JSON.stringify(params[name])\n\t\t\t// .*? means don't be greedy and stop at the first \"\n\t\t\tconst find = new RegExp(`\"${name}\":\\\\s*\".*?\"`, 'g')\n\t\t\tconst withValue = `\"${name}\": ${value}`\n\t\t\tlist.push({find, withValue})\n\t\t\treturn list\n\t\t}, [])\n\t\tfiles.forEach((file) => {\n\t\t\t// replace \"<name>\": \".*?\" with \"<name>\": \"<value>\"\n\t\t\t// support values that contain escaped double quotes by masking them\n\t\t\t// to minimize the risk of using a string in the file as our mask\n\t\t\t// use an unique mask to obscure the escaped double quote (\\\\\")\n\t\t\tconst key = Math.random().toString(28).slice(2, 10)\n\t\t\tconst mask = `«MaskingEscapedDoubleQuotes_${key}»`\n\t\t\tconst maskRegExp = new RegExp(mask, 'g')\n\t\t\tconst text = this.readFile(file)\n\t\t\tconst masked = text.replace(/\\\\\"/g, mask)\n\t\t\tconst updated = replaceList.reduce((modified, param) => {\n\t\t\t\treturn modified.replace(param.find, param.withValue)\n\t\t\t}, masked)\n\t\t\tconst unmasked = updated.replace(maskRegExp, '\\\\\"')\n\t\t\tthis.writeFile(file, unmasked)\n\t\t\tconsole.log('swizzled', file)\n\t\t})\n\t}\n\n\tsaveSwizzleConfig({conf, file}) {\n\t\tconst swizzleJson = pick(conf, ['files', 'params', 'stackName'])\n\t\tconst rc = Object.assign({}, conf.rc, {stacks: {}})\n\t\tswizzleJson.stacks = {}\n\t\tif (conf.stacks) {\n\t\t\tObject.keys(conf.stacks).forEach((stackName) => {\n\t\t\t\tlet json = {stacks: {}}\n\t\t\t\tconst stack = conf.stacks[stackName]\n\t\t\t\tconst stackParams = conf.params.reduce((result, param) => {\n\t\t\t\t\tif (param.noSave) {\n\t\t\t\t\t\tresult[param.name] = '<no-save>'\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult[param.name] = stack.params[param.name]\n\t\t\t\t\t}\n\t\t\t\t\treturn result\n\t\t\t\t}, {})\n\t\t\t\tconst entry = {[stackName]: stackParams}\n\t\t\t\tconst resolvedFile = path.resolve(this.cwd(), file)\n\t\t\t\tconst resolvedStackFile = path.resolve(this.cwd(), stack.file)\n\t\t\t\tif (stack.file && resolvedStackFile === resolvedFile) {\n\t\t\t\t\tdefaultsDeep(swizzleJson.stacks, entry)\n\t\t\t\t} else {\n\t\t\t\t\tif (this.isFile(resolvedStackFile)) {\n\t\t\t\t\t\tjson = this.readJsonFile({file: resolvedStackFile})\n\t\t\t\t\t}\n\t\t\t\t\tif (!json.stacks) {\n\t\t\t\t\t\tjson.stacks = {}\n\t\t\t\t\t}\n\t\t\t\t\tObject.assign(json.stacks, entry)\n\t\t\t\t\tthis.writeJsonFile({file: resolvedStackFile, json})\n\t\t\t\t\trc.stacks[stackName] = {file: stack.file}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tif (Object.keys(rc.stacks).length === 0) {\n\t\t\tdelete rc.stacks\n\t\t} else {\n\t\t\t// todo handle merged rc files from ~ and . locations\n\t\t\tconst rcFile = rc.filePath || rcFileName\n\t\t\tthis.writeJsonFile({file: rcFile, json: rc})\n\t\t}\n\t\tif (!file) {\n\t\t\tfile = this.getSwizzleJsonFilePath()\n\t\t}\n\t\tif (Object.keys(swizzleJson.stacks).length === 0) {\n\t\t\tdelete swizzleJson.stacks\n\t\t}\n\t\tthis.writeJsonFile({file, json: swizzleJson})\n\t}\n\n\tloadSwizzleConfig({file, rc}) {\n\t\tif (this.isFile(file)) {\n\t\t\tconst swizzleJson = defaultsDeep(defaultConf(), this.readJsonFile({file}))\n\t\t\tswizzleJson.filePath = file\n\t\t\tswizzleJson.stacks = this.loadStacksFromJsonFile({file})\n\t\t\tswizzleJson.stacks = defaultsDeep({}, rc.stacks, swizzleJson.stacks)\n\t\t\tswizzleJson.rc = omit(rc, 'stacks');\n\t\t\treturn swizzleJson\n\t\t}\n\t\tconst swizzleJson = defaultConf()\n\t\tswizzleJson.stacks = defaultsDeep({}, rc.stacks)\n\t\treturn swizzleJson\n\t}\n\n\tloadStacksFromJsonFile({file}) {\n\t\tconst json = this.readJsonFile({file})\n\t\tconst stacks = json.stacks ? json.stacks : {}\n\t\treturn Object.keys(stacks).reduce((map, stackName) => {\n\t\t\tconst stack = stacks[stackName]\n\t\t\tif (stack.file) {\n\t\t\t\tconst stacksFile = this.readJsonFile({file: stack.file})\n\t\t\t\tconst update = Object.keys(stacksFile.stacks).reduce((map, stackName) => {\n\t\t\t\t\tconst params = stacksFile.stacks[stackName]\n\t\t\t\t\tconst entry = {[stackName]: {params, file: stack.file}}\n\t\t\t\t\treturn defaultsDeep(entry, map)\n\t\t\t\t}, {})\n\t\t\t\treturn defaultsDeep(map, update)\n\t\t\t} else {\n\t\t\t\tconst params = stack.params ? stack.params : stack\n\t\t\t\tconst entry = {[stackName]: {params, file}}\n\t\t\t\treturn defaultsDeep(entry, map)\n\t\t\t}\n\t\t}, {})\n\t}\n\n\tloadRcConfig({rcFiles}) {\n\t\tconst rc = {stacks: {}}\n\t\tconst gotFileNames = rcFiles && rcFiles.length\n\t\tif (!gotFileNames) {\n\t\t\treturn rc\n\t\t}\n\t\trcFiles.forEach((file) => {\n\t\t\tif (/^~\\//.test(file)) {\n\t\t\t\tfile = this.resolvePath(this.home(), file.replace(/^~\\//, ''))\n\t\t\t}\n\t\t\tif (this.isFile(file)) {\n\t\t\t\trc.stacks.file = file\n\t\t\t\t// todo to support merging of rc files ...\n\t\t\t\t// need to keep the stacks with their rc\n\t\t\t\t// for now only use / allow one rc file\n\t\t\t\t// if multiple are give the last one wins\n\t\t\t\treturn defaultsDeep(rc.stacks, this.loadStacksFromJsonFile({file}))\n\t\t\t}\n\t\t})\n\t\treturn rc\n\t}\n\n\tgetRcFilePathsIfExists() {\n\t\tconst paths = []\n\t\tconst localRc = this.resolvePath(this.cwd(), rcFileName)\n\t\tif (this.isFile(localRc)) {\n\t\t\tpaths.push(localRc)\n\t\t}\n\t\tconst homeRc = this.resolvePath(this.home(), rcFileName);\n\t\tif (this.isFile(homeRc)) {\n\t\t\tpaths.push(homeRc)\n\t\t}\n\t\treturn paths\n\t}\n\n\tgetSwizzleJsonFilePath() {\n\t\treturn path.resolve(this.cwd(), swizzleFileName)\n\t}\n\n\treadJsonFile({file}) {\n\t\treturn JSON.parse(this.readFile(file, 'utf8'))\n\t}\n\n\twriteJsonFile({file, json}) {\n\t\treturn fsx.outputJsonSync(file, json, {spaces: '\\t'})\n\t}\n\n\treadFile(file) {\n\t\treturn fs.readFileSync(file, 'utf8')\n\t}\n\n\twriteFile(file, text) {\n\t\tfs.writeFileSync(file, text, 'utf8')\n\t}\n\n\tresolvePath(...filePath) {\n\t\treturn path.resolve.apply(path, filePath)\n\t}\n\n\tisFile(file) {\n\t\treturn fsx.pathExistsSync(file)\n\t}\n\n\tcwd() {\n\t\treturn process.cwd()\n\t}\n\n\thome() {\n\t\treturn home()\n\t}\n\n}\n\nexport const swizzleFileSystem = new SwizzleFileSystem()\n"]}