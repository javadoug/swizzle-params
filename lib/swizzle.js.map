{"version":3,"sources":["../src/swizzle.js"],"names":["initializeConfig","sfs","rcFile","getRcFilePathsIfExists","rc","loadRcConfig","rcFiles","swizzleFilePath","getSwizzleJsonFilePath","console","log","loadSwizzleConfig","file","Swizzle","conf","inquirer","addParam","name","desc","defaultValue","generated","password","noSave","param","fs","saveSwizzleConfig","state","updateGeneratedParams","generatedParams","Object","keys","length","lastStack","swizzleStackName","stack","stacks","forEach","existingParam","params","find","p","assign","addStack","swizzleStack","removeParam","addFiles","files","removeFiles","swizzleStackInit","options","confStackName","stackName","prompts","message","default","prompt","then","answers","swizzleStackConfig","editFirst","useRc","questions","reduce","list","hasParam","askUser","description","question","choices","Array","type","regex","validate","push","input","Promise","resolve","reject","catch","swizzleSourceFiles","clean","verbose","listParams","map","filePath","exports"],"mappings":"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","file":"swizzle.js","sourcesContent":["import _inquirer from 'inquirer'\nimport {SwizzleConfig} from './swizzle-config'\nimport {swizzleFileSystem} from './swizzle-file-system'\nimport {validateUserInput} from './validateUserInput'\n\n// todo changing stack should prompt for --no-save items again\n// todo remove-param notifies which code files use this param\n// todo validate the JSON integrity of .json files we swizzle\n\nexport function initializeConfig(sfs) {\n\t// only uses ~/.swizzlerc or ./.swizzlerc - no merging yet\n\tconst rcFile = sfs.getRcFilePathsIfExists()\n\tconst rc = rcFile ? sfs.loadRcConfig({rcFiles: [rcFile]}) : {}\n\tconst swizzleFilePath = sfs.getSwizzleJsonFilePath()\n\tconsole.log(swizzleFilePath)\n\treturn new SwizzleConfig(sfs.loadSwizzleConfig({file: swizzleFilePath, rc}))\n}\n\nclass Swizzle {\n\n\tconstructor(conf = null, sfs = swizzleFileSystem, inquirer = _inquirer) {\n\t\tif (conf instanceof SwizzleConfig) {\n\t\t\tthis.conf = conf\n\t\t} else {\n\t\t\tthis.conf = initializeConfig(sfs)\n\t\t}\n\t\tthis.fs = sfs\n\t\tthis.inquirer = inquirer\n\t}\n\n\taddParam = ({name, desc, defaultValue, generated, password, noSave}) => {\n\t\tconst param = {name, desc, defaultValue, generated, password, noSave}\n\t\tthis.conf.addParam(param)\n\t\tthis.fs.saveSwizzleConfig({file: this.swizzleFilePath, conf: this.conf.state})\n\t}\n\n\tupdateGeneratedParams = (generatedParams) => {\n\n\t\tif (!(generatedParams && Object.keys(generatedParams).length)) {\n\t\t\treturn\n\t\t}\n\n\t\tlet saveSwizzleConfig = false\n\t\tconst lastStack = this.swizzleStackName\n\t\tconst stack = this.conf.state.stacks[lastStack]\n\n\t\tObject.keys(generatedParams).forEach((name) => {\n\t\t\tconst generated = true\n\t\t\tconst existingParam = this.conf.state.params.find((p) => p.name === name)\n\t\t\tif (!existingParam) {\n\t\t\t\tsaveSwizzleConfig = true\n\t\t\t\tthis.conf.addParam({name, generated})\n\t\t\t}\n\t\t})\n\n\t\tif (saveSwizzleConfig) {\n\t\t\tthis.fs.saveSwizzleConfig({file: this.swizzleFilePath, conf: this.conf.state})\n\t\t}\n\n\t\tif (!stack) {\n\t\t\t// there is no stack to swizzle\n\t\t\t// todo determine which use cases would hit this and\n\t\t\t// what the right response should be....\n\t\t\treturn\n\t\t}\n\n\t\tconst params = {}\n\n\t\tObject.assign(params, stack.params, generatedParams)\n\n\t\tthis.conf.addStack({name: lastStack, params, file: stack.file})\n\n\t\t// return the promise for catching errors in testing\n\t\treturn this.swizzleStack(lastStack)\n\n\t}\n\n\tremoveParam = ({name}) => {\n\t\t// todo notify which code files use this param\n\t\tconst param = {name}\n\t\tconst removeParam = this.conf.state.params.find((p) => p.name === name)\n\t\tif (!removeParam) {\n\t\t\tconsole.log('param name is not found in swizzle config', name, this.swizzleFilePath)\n\t\t\treturn\n\t\t}\n\t\tthis.conf.removeParam(param)\n\t\tthis.fs.saveSwizzleConfig({file: this.swizzleFilePath, conf: this.conf.state})\n\t}\n\n\taddFiles = ({files}) => {\n\t\tthis.conf.addFiles({files})\n\t\tthis.fs.saveSwizzleConfig({file: this.swizzleFilePath, conf: this.conf.state})\n\t}\n\n\tremoveFiles = ({files}) => {\n\t\tthis.conf.removeFiles({files})\n\t\tthis.fs.saveSwizzleConfig({file: this.swizzleFilePath, conf: this.conf.state})\n\t}\n\n\tswizzleStackInit = (options) => {\n\n\t\tconst confStackName = this.conf.stackName\n\n\t\tconst prompts = [{\n\t\t\tname: 'stackName',\n\t\t\tmessage: 'enter stack name',\n\t\t\tdefault: confStackName || 'dev'\n\t\t}]\n\n\t\treturn this.inquirer.prompt(prompts)\n\t\t\t.then((answers) => {\n\t\t\t\tthis.swizzleStack(answers.stackName, options)\n\t\t\t})\n\n\t}\n\n\tswizzleStackConfig = (options) => {\n\n\t\tconst confStackName = this.conf.stackName\n\n\t\tif (confStackName) {\n\t\t\treturn this.swizzleStack(confStackName, options)\n\t\t}\n\n\t\tconst prompts = [{\n\t\t\tname: 'stackName',\n\t\t\tmessage: 'enter stack name',\n\t\t\tdefault: 'dev'\n\t\t}]\n\n\t\treturn this.inquirer.prompt(prompts)\n\t\t\t.then((answers) => {\n\t\t\t\treturn answers.stackName\n\t\t\t})\n\t\t\t.then((stackName) => this.swizzleStack(stackName, options))\n\n\t}\n\n\tswizzleStack = (name, {editFirst, useRc, file} = {}) => {\n\n\t\tconst params = this.conf.state.params\n\t\tconst stack = this.conf.state.stacks[name] || {\n\t\t\tfile: this.swizzleFilePath,\n\t\t\tparams: {}\n\t\t}\n\n\t\tif (useRc) {\n\t\t\tstack.file = '.swizzlerc'\n\t\t}\n\n\t\tif (file) {\n\t\t\tstack.file = file\n\t\t}\n\n\t\tconst questions = params.reduce((list, param) => {\n\t\t\tconst name = param.name\n\t\t\tconst hasParam = !!stack.params[name]\n\t\t\tconst askUser = editFirst || (param.noSave && !hasParam) || !(hasParam || param.generated)\n\t\t\tif (askUser) {\n\t\t\t\tconst message = `enter ${param.description}${param.generated ? ' <generated>' : ''}`\n\t\t\t\tconst defaultValue = stack.params[name] ? stack.params[name] : param.defaultValue\n\t\t\t\tconst question = {\n\t\t\t\t\tname,\n\t\t\t\t\tmessage,\n\t\t\t\t\tdefault: defaultValue\n\t\t\t\t}\n\t\t\t\tif (param.choices instanceof Array) {\n\t\t\t\t\tquestion.type = 'list'\n\t\t\t\t\tquestion.choices = param.choices\n\t\t\t\t}\n\t\t\t\tif (param.regex) {\n\t\t\t\t\tquestion.validate = validateUserInput(param.regex)\n\t\t\t\t}\n\t\t\t\tif (param.password) {\n\t\t\t\t\tquestion.type = 'password'\n\t\t\t\t}\n\t\t\t\tif (param.noSave) {\n\t\t\t\t\tquestion.default = param.defaultValue\n\t\t\t\t}\n\t\t\t\tlist.push(question)\n\t\t\t}\n\t\t\treturn list\n\t\t}, [])\n\n\t\tconst input = new Promise((resolve, reject) => {\n\t\t\tif (stack.params && Object.keys(stack.params).length) {\n\t\t\t\tif (questions.length === 0) {\n\t\t\t\t\treturn resolve(stack)\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.inquirer.prompt(questions)\n\t\t\t\t.then((answers) => {\n\t\t\t\t\tObject.assign(stack.params, answers)\n\t\t\t\t\treturn stack\n\t\t\t\t})\n\t\t\t\t.then(resolve)\n\t\t\t\t.catch(reject)\n\t\t})\n\n\t\t// return the promise for catching errors in testing\n\t\treturn input.then((stack) => {\n\t\t\tthis.conf.addStack({name, params: stack.params, file: stack.file})\n\t\t\tthis.conf.stackName = name\n\t\t\tthis.fs.saveSwizzleConfig({conf: this.conf.state, file: this.swizzleFilePath})\n\t\t\treturn stack.params\n\t\t}).then((params) => {\n\t\t\tif (this.conf.files.length === 0) {\n\t\t\t\tconsole.log('nothing to swizzle: no files specified in swizzle.json')\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.fs.swizzleSourceFiles({params, files: this.conf.files})\n\t\t})\n\n\t}\n\n\tclean = ({verbose} = {verbose: false}) => {\n\t\tconst params = this.conf.listParams({verbose: true}).reduce((map, param) => {\n\t\t\tmap[param.name] = param.defaultValue\n\t\t\treturn map\n\t\t}, {})\n\t\tthis.fs.swizzleSourceFiles({params, files: this.conf.files})\n\t\tconst file = this.conf.swizzleFilePath\n\t\tdelete this.conf.state.stacks\n\t\tdelete this.conf.state.stackName\n\t\tthis.fs.saveSwizzleConfig({conf: this.conf.state, file})\n\t\tif (verbose) {\n\t\t\tconsole.log('cleaned following params: ', params)\n\t\t}\n\t}\n\n\tget swizzleFilePath() {\n\t\treturn this.conf.state.filePath\n\t}\n\n\tget swizzleStackName() {\n\t\treturn this.conf.stackName\n\t}\n\n}\n\nexports.Swizzle = Swizzle\n"]}