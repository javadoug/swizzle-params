{"version":3,"sources":["../src/swizzle.js"],"names":["initializeConfig","sfs","rcFile","getRcFilePathsIfExists","rc","loadRcConfig","rcFiles","swizzleFilePath","getSwizzleJsonFilePath","conf","loadSwizzleConfig","file","Swizzle","inquirer","addParam","name","desc","defaultValue","generated","param","fs","saveSwizzleConfig","state","updateGeneratedParams","generatedParams","Object","keys","length","lastStack","swizzleStackName","stack","stacks","forEach","existingParam","params","find","p","assign","addStack","swizzleStack","removeParam","console","log","addFiles","files","removeFiles","swizzleStackInit","options","confStackName","stackName","prompts","message","default","prompt","then","answers","swizzleStackConfig","editFirst","useRc","questions","reduce","list","hasParam","askUser","description","question","choices","Array","type","regex","validate","password","push","input","Promise","resolve","reject","catch","swizzleSourceFiles","clean","verbose","listParams","map","filePath","exports"],"mappings":"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","file":"swizzle.js","sourcesContent":["import _inquirer from 'inquirer'\nimport {SwizzleConfig} from './swizzle-config'\nimport {swizzleFileSystem} from './swizzle-file-system'\nimport {validateUserInput} from './validateUserInput'\n\n// todo remove-param notifies which code files use this param\n// todo add input validations to the add-param command\n// todo inject inquirer into class so we can test w/o prompting\n// todo validate the JSON integrity of .json files we swizzle\n\nexport function initializeConfig(sfs) {\n\t// only uses ~/.swizzlerc or ./.swizzlerc - no merging yet\n\tconst rcFile = sfs.getRcFilePathsIfExists()\n\tconst rc = rcFile ? sfs.loadRcConfig({rcFiles: [rcFile]}) : {}\n\tconst swizzleFilePath = sfs.getSwizzleJsonFilePath()\n\tconst conf = new SwizzleConfig(sfs.loadSwizzleConfig({file: swizzleFilePath, rc}))\n\treturn conf\n}\n\nclass Swizzle {\n\n\tconstructor(conf = null, sfs = swizzleFileSystem, inquirer = _inquirer) {\n\t\tif (conf instanceof SwizzleConfig) {\n\t\t\tthis.conf = conf\n\t\t} else {\n\t\t\tthis.conf = initializeConfig(sfs)\n\t\t}\n\t\tthis.fs = sfs\n\t\tthis.inquirer = inquirer\n\t}\n\n\taddParam = ({name, desc, defaultValue, generated}) => {\n\t\tconst param = {name, desc, defaultValue, generated}\n\t\tthis.conf.addParam(param)\n\t\tthis.fs.saveSwizzleConfig({file: this.swizzleFilePath, conf: this.conf.state})\n\t}\n\n\tupdateGeneratedParams = (generatedParams) => {\n\n\t\tif (!(generatedParams && Object.keys(generatedParams).length)) {\n\t\t\treturn\n\t\t}\n\n\t\tconst lastStack = this.swizzleStackName\n\n\t\tconst stack = this.conf.state.stacks[lastStack]\n\t\tlet saveSwizzleConfig = false\n\t\tObject.keys(generatedParams).forEach((name) => {\n\t\t\tconst generated = true\n\t\t\tconst existingParam = this.conf.state.params.find((p) => p.name === name)\n\t\t\tif (!existingParam) {\n\t\t\t\tsaveSwizzleConfig = true\n\t\t\t\tthis.conf.addParam({name, generated})\n\t\t\t}\n\t\t})\n\n\t\tif (saveSwizzleConfig) {\n\t\t\tthis.fs.saveSwizzleConfig({file: this.swizzleFilePath, conf: this.conf.state})\n\t\t}\n\n\t\tif (!stack) {\n\t\t\t// there is no stack to swizzle\n\t\t\t// todo determine which use cases would hit this and\n\t\t\t// what the right response should be....\n\t\t\treturn\n\t\t}\n\n\t\tconst params = {}\n\t\tObject.assign(params, stack.params, generatedParams)\n\t\tthis.conf.addStack({name: lastStack, params, file: stack.file})\n\n\t\t// return the promise for catching errors in testing\n\t\treturn this.swizzleStack(lastStack)\n\n\t}\n\n\tremoveParam = ({name}) => {\n\t\t// todo notify which code files use this param\n\t\tconst param = {name}\n\t\tconst removeParam = this.conf.state.params.find((p) => p.name === name)\n\t\tif (!removeParam) {\n\t\t\tconsole.log('param name is not found in swizzle config', name, this.swizzleFilePath)\n\t\t\treturn\n\t\t}\n\t\tthis.conf.removeParam(param)\n\t\tthis.fs.saveSwizzleConfig({file: this.swizzleFilePath, conf: this.conf.state})\n\t}\n\n\taddFiles = ({files}) => {\n\t\tthis.conf.addFiles({files})\n\t\tthis.fs.saveSwizzleConfig({file: this.swizzleFilePath, conf: this.conf.state})\n\t}\n\n\tremoveFiles = ({files}) => {\n\t\tthis.conf.removeFiles({files})\n\t\tthis.fs.saveSwizzleConfig({file: this.swizzleFilePath, conf: this.conf.state})\n\t}\n\n\tswizzleStackInit = (options) => {\n\n\t\tconst confStackName = this.conf.stackName\n\n\t\tconst prompts = [{\n\t\t\tname: 'stackName',\n\t\t\tmessage: 'enter stack name',\n\t\t\tdefault: confStackName || 'dev'\n\t\t}]\n\n\t\treturn this.inquirer.prompt(prompts)\n\t\t\t.then((answers) => {\n\t\t\t\tthis.swizzleStack(answers.stackName, options)\n\t\t\t})\n\n\t}\n\n\tswizzleStackConfig = (options) => {\n\n\t\tconst confStackName = this.conf.stackName\n\n\t\tif (confStackName) {\n\t\t\treturn this.swizzleStack(confStackName, options)\n\t\t}\n\n\t\tconst prompts = [{\n\t\t\tname: 'stackName',\n\t\t\tmessage: 'enter stack name',\n\t\t\tdefault: 'dev'\n\t\t}]\n\n\t\treturn this.inquirer.prompt(prompts)\n\t\t\t.then((answers) => {\n\t\t\t\treturn answers.stackName\n\t\t\t})\n\t\t\t.then((stackName) => this.swizzleStack(stackName, options))\n\n\t}\n\n\tswizzleStack = (name, {editFirst, useRc, file} = {}) => {\n\n\t\tconst params = this.conf.state.params\n\t\tconst stack = this.conf.state.stacks[name] || {\n\t\t\tfile: this.swizzleFilePath,\n\t\t\tparams: {}\n\t\t}\n\n\t\tif (useRc) {\n\t\t\tstack.file = '.swizzlerc'\n\t\t}\n\n\t\tif (file) {\n\t\t\tstack.file = file\n\t\t}\n\n\t\tconst questions = params.reduce((list, param) => {\n\t\t\tconst hasParam = !!stack.params[param.name]\n\t\t\tconst askUser = editFirst || !(hasParam || param.generated)\n\t\t\tif (askUser) {\n\t\t\t\tconst name = param.name\n\t\t\t\tconst message = `enter ${param.description}${param.generated ? ' <generated>' : ''}`\n\t\t\t\tconst defaultValue = stack.params[name] ? stack.params[name] : param.defaultValue\n\t\t\t\tconst question = {\n\t\t\t\t\tname,\n\t\t\t\t\tmessage,\n\t\t\t\t\tdefault: defaultValue\n\t\t\t\t}\n\t\t\t\tif (param.choices instanceof Array) {\n\t\t\t\t\tquestion.type = 'list'\n\t\t\t\t\tquestion.choices = param.choices\n\t\t\t\t}\n\t\t\t\tif (param.regex) {\n\t\t\t\t\tquestion.validate = validateUserInput(param.regex)\n\t\t\t\t}\n\t\t\t\tif (param.password) {\n\t\t\t\t\tquestion.type = 'password'\n\t\t\t\t}\n\t\t\t\tlist.push(question)\n\t\t\t}\n\t\t\treturn list\n\t\t}, [])\n\n\t\tconst input = new Promise((resolve, reject) => {\n\t\t\tif (stack.params && Object.keys(stack.params).length) {\n\t\t\t\tif (questions.length === 0) {\n\t\t\t\t\treturn resolve(stack)\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.inquirer.prompt(questions)\n\t\t\t\t.then((answers) => {\n\t\t\t\t\tObject.assign(stack.params, answers)\n\t\t\t\t\treturn stack\n\t\t\t\t})\n\t\t\t\t.then(resolve)\n\t\t\t\t.catch(reject)\n\t\t})\n\n\t\t// return the promise for catching errors in testing\n\t\treturn input.then((stack) => {\n\t\t\tthis.conf.addStack({name, params: stack.params, file: stack.file})\n\t\t\tthis.conf.stackName = name\n\t\t\tthis.fs.saveSwizzleConfig({conf: this.conf.state, file: this.swizzleFilePath})\n\t\t\treturn stack.params\n\t\t}).then((params) => {\n\t\t\tif (this.conf.files.length === 0) {\n\t\t\t\tconsole.log('nothing to swizzle: no files specified in swizzle.json')\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis.fs.swizzleSourceFiles({params, files: this.conf.files})\n\t\t})\n\n\t}\n\n\tclean = ({verbose} = {verbose: false}) => {\n\t\tconst params = this.conf.listParams({verbose: true}).reduce((map, param) => {\n\t\t\tmap[param.name] = param.defaultValue\n\t\t\treturn map\n\t\t}, {})\n\t\tthis.fs.swizzleSourceFiles({params, files: this.conf.files})\n\t\tconst file = this.conf.swizzleFilePath\n\t\tdelete this.conf.state.stacks\n\t\tdelete this.conf.state.stackName\n\t\tthis.fs.saveSwizzleConfig({conf: this.conf.state, file})\n\t\tif (verbose) {\n\t\t\tconsole.log('cleaned following params: ', params)\n\t\t}\n\t}\n\n\tget swizzleFilePath() {\n\t\treturn this.conf.state.filePath\n\t}\n\n\tget swizzleStackName() {\n\t\treturn this.conf.stackName\n\t}\n\n}\n\nexports.Swizzle = Swizzle\n"]}